{"version":3,"sources":["components/home.tsx","store/rootReducer.tsx","store/actionTypes.ts","components/question.tsx","components/sideBar.tsx","components/play.tsx","components/final.tsx","App.tsx","store/store.tsx","index.tsx"],"names":["Home","className","to","setChoosenQuestionIndex","value","type","payload","setResult","initialState","questions","choosenQuestionIndex","result","alphabet","Question","updateChoosenQuestionIndex","updateResult","setSideBarIsOpen","screenWidth","useState","choosenAnswer","setChoosenAnswer","endTimeOut","setEndTimeOut","disable","setDisable","history","useHistory","chooseVariant","answer","showNextStep","correct","index","length","cost","push","currentQuestion","desktopScreen","onClick","aria-label","question","answers","map","i","currentAnswer","rightAnswer","falseAnswer","classes","join","key","disabled","setTimeout","defaultProps","connect","state","dispatch","SideBar","revertQuestopn","reverse","indexOf","toLocaleString","modifyQuestions","data","arr","el","Math","floor","random","choosen","price","sort","a","b","ref","useRef","sideBarIsOpen","current","clientWidth","setScreenWidth","useEffect","onResize","fn","timeout","timeoutID","window","clearTimeout","debounce","addEventListener","mobileScreen","App","path","exact","component","Play","Final","middleWares","thunk","store","createStore","action","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58035c76.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/home.scss';\n\nfunction Home(): JSX.Element {\n  return (\n    <main className=\"home\">\n      <div className=\"home__background\">\n        <div className=\"home__wrapper\">\n          <div className=\"home__logo\" />\n          <div className=\"home__info\">\n            <p className=\"home__info-text\">Who wants to be a millionaire?</p>\n            <Link to=\"/game\" className=\"button\">Start</Link>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Home;\n","import {\n  StartData, StartAnswer, Action, QuestionsObject,\n} from '../types';\n\nimport * as types from './actionTypes';\n\nexport const setQuestions = (value: QuestionsObject[]) => ({\n  type: types.GET_QUESTIONS,\n  payload: value,\n});\n\nexport const setChoosenQuestionIndex = (value: number) => ({\n  type: types.SET_CHOOSEN_QUESTION_INDEX,\n  payload: value,\n});\n\nexport const setResult = (value: number | string | null) => ({\n  type: types.SET_RESULT,\n  payload: value,\n});\n\nexport const changeQuestions = (data: StartData) => (dispatch: Function) => {\n  const arr = data.data.map((el) => {\n    const question = el.questions[Math.floor(Math.random()\n            * el.questions.length)];\n    const answers = question.answers.map((answer: StartAnswer) => ({\n      value: answer.value,\n      correct: answer.correct,\n      choosen: null,\n    }));\n    const result = {\n      question: question.question,\n      answers,\n      cost: el.price,\n    };\n    return result;\n  }).sort((a, b) => a.cost - b.cost);\n\n  dispatch(setQuestions(arr));\n  dispatch(setChoosenQuestionIndex(0));\n  dispatch(setResult(null));\n};\n\nconst initialState = {\n  questions: [],\n  choosenQuestionIndex: null,\n  result: null,\n};\n\nexport const rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case types.GET_QUESTIONS:\n      return {\n        ...state,\n        questions: action.payload,\n      };\n    case types.SET_CHOOSEN_QUESTION_INDEX:\n      return {\n        ...state,\n        choosenQuestionIndex: action.payload,\n      };\n    case types.SET_RESULT:\n      return {\n        ...state,\n        result: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","export const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const SET_CHOOSEN_QUESTION_INDEX = 'SET_CHOOSEN_QUESTION_INDEX';\nexport const SET_RESULT = 'SET_RESULT';\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setChoosenQuestionIndex, setResult } from '../store/rootReducer';\nimport { Answer, ReduxState, QuestionsObject } from '../types';\nimport '../styles/question.scss';\nimport '../styles/side.scss';\n\ninterface Props {\n  updateChoosenQuestionIndex: Function,\n  updateResult: Function\n  questions: QuestionsObject[],\n  choosenQuestionIndex: number,\n  setSideBarIsOpen?: Function,\n  screenWidth?: number\n}\nconst alphabet = ['A', 'B', 'C', 'D', 'E', 'F'];\n\nconst Question = ({\n  choosenQuestionIndex, questions, updateChoosenQuestionIndex, updateResult, setSideBarIsOpen, screenWidth,\n}: Props): JSX.Element => {\n  const [choosenAnswer, setChoosenAnswer] = useState<Answer | null>(null);\n  const [endTimeOut, setEndTimeOut] = useState<boolean>(false);\n  const [disable, setDisable] = useState(false);\n\n  const history = useHistory();\n\n  const chooseVariant = (answer: Answer) => {\n    setChoosenAnswer(answer);\n    setDisable(true);\n  };\n\n  const showNextStep = (correct: boolean, index: number) => {\n    if (correct && index !== questions.length - 1) {\n      setChoosenAnswer(null);\n      setEndTimeOut(false);\n      setDisable(false);\n      updateChoosenQuestionIndex(index + 1);\n    } else if (!correct || index === questions.length - 1) {\n      if (!correct) {\n        index === 0\n          ? updateResult('0')\n          : updateResult(questions[index - 1].cost);\n      } else {\n        updateResult(questions[index].cost);\n      }\n      history.push('final');\n    }\n  };\n\n  const currentQuestion = questions[choosenQuestionIndex];\n  const desktopScreen = screenWidth && screenWidth >= 1360;\n  return (\n    <div className=\"question\">\n      <div className=\"question__wrapper\">\n        <div className=\"question__header\">\n          <button\n            className=\"question__button\"\n            type=\"button\"\n            onClick={() => setSideBarIsOpen && setSideBarIsOpen(true)}\n            aria-label=\"open sidebar\"\n          />\n        </div>\n        <p className=\"question__text\">{currentQuestion && currentQuestion.question}</p>\n        <div className=\"answers\">\n          {currentQuestion && currentQuestion.answers.map((answer: Answer, i: number) => {\n            const currentAnswer = !endTimeOut && choosenAnswer\n              && choosenAnswer.value === answer.value;\n            const rightAnswer = endTimeOut && choosenAnswer && answer.correct;\n            const falseAnswer = endTimeOut\n              && choosenAnswer\n              && choosenAnswer.value === answer.value\n              && !answer.correct;\n            const classes = ['answers__value'];\n\n            if (currentAnswer) {\n              desktopScreen\n                ? classes.push('answers__value--desk-orange')\n                : classes.push('answers__value--orange');\n            }\n            if (rightAnswer) {\n              desktopScreen\n                ? classes.push('answers__value--desk-green')\n                : classes.push('answers__value--green');\n            }\n            if (falseAnswer) {\n              desktopScreen\n                ? classes.push('answers__value--desk-red')\n                : classes.push('answers__value--red');\n            }\n            return (\n              <button\n                className={classes.join(' ')}\n                key={answer.value}\n                type=\"button\"\n                disabled={disable}\n                onClick={() => [\n                  chooseVariant(answer),\n                  setTimeout(setEndTimeOut, 2000, true),\n                  setTimeout(showNextStep, 4000,\n                    answer.correct, choosenQuestionIndex)]}\n              >\n                <span className=\"answers__value__letter\">{alphabet[i]}</span>\n                {answer.value}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nQuestion.defaultProps = {\n  setSideBarIsOpen: () => { },\n  screenWidth: 0,\n};\n\nconst mapStateToProps = (state: ReduxState) => ({\n  choosenQuestionIndex: state.choosenQuestionIndex,\n  questions: state.questions,\n});\n\nconst mapDispatchToProps = (dispatch: Function) => ({\n  updateResult: (value: number) => dispatch((setResult(value))),\n  updateChoosenQuestionIndex:\n    (value: number) => dispatch(setChoosenQuestionIndex(value)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Question);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setChoosenQuestionIndex, setResult } from '../store/rootReducer';\nimport { ReduxState, QuestionsObject } from '../types';\nimport '../styles/side.scss';\nimport '../styles/question.scss';\n\ninterface Props {\n  questions: QuestionsObject[],\n  choosenQuestionIndex: number,\n  setSideBarIsOpen?: Function,\n  screenWidth?: number\n}\n\nconst SideBar = ({\n  choosenQuestionIndex, questions, setSideBarIsOpen, screenWidth,\n}: Props): JSX.Element => {\n  const revertQuestopn = [...questions].reverse();\n  return (\n    <div className=\"side\">\n      <div className=\"side__header\">\n        <button\n          className=\"side__button\"\n          type=\"button\"\n          onClick={() => setSideBarIsOpen && setSideBarIsOpen(false)}\n          aria-label=\"close sidebar\"\n        />\n      </div>\n      <aside className=\"side__prices\">\n        {revertQuestopn && revertQuestopn.map((question: QuestionsObject) => {\n          const index = questions.indexOf(question);\n          const classes = ['side__price'];\n\n          if (index < choosenQuestionIndex) { classes.push('side__price--gray'); }\n          if (index === choosenQuestionIndex) { classes.push('side__price--orange'); }\n          if (index === choosenQuestionIndex && screenWidth && screenWidth >= 700) { classes.push('side__price--desktop'); }\n          return (\n            <p key={question.cost} className={classes.join(' ')}>\n              {`$${question.cost.toLocaleString()}`}\n            </p>\n          );\n        })}\n      </aside>\n    </div>\n  );\n};\n\nSideBar.defaultProps = {\n  setSideBarIsOpen: () => { },\n  screenWidth: 0,\n};\n\nconst mapStateToProps = (state: ReduxState) => ({\n  choosenQuestionIndex: state.choosenQuestionIndex,\n  questions: state.questions,\n});\n\nconst mapDispatchToProps = (dispatch: Function) => ({\n  updateResult: (value: number) => dispatch((setResult(value))),\n  updateChoosenQuestionIndex:\n    (value: number) => dispatch(setChoosenQuestionIndex(value)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SideBar);\n","import React, { useEffect, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { changeQuestions } from '../store/rootReducer';\nimport data from '../appConfig.json';\nimport { ReduxState, StartData } from '../types';\nimport Question from './question';\nimport SideBar from './sideBar';\nimport '../styles/play.scss';\n\ninterface Props {\n  modifyQuestions: Function,\n}\n\nconst Play = ({ modifyQuestions }: Props): JSX.Element => {\n  const ref = useRef<HTMLHeadingElement>(null);\n\n  const [sideBarIsOpen, setSideBarIsOpen] = useState<boolean>(false);\n  const [screenWidth, setScreenWidth] = useState(ref.current && ref.current.clientWidth);\n\n  useEffect(() => {\n    modifyQuestions(data);\n    setScreenWidth(ref.current && ref.current.clientWidth);\n  }, []);\n\n  const debounce = (fn: Function, timeout: number) => {\n    let timeoutID = -1;\n    return () => {\n      if (timeoutID > -1) {\n        window.clearTimeout(timeoutID);\n      }\n      timeoutID = window.setTimeout(fn, timeout);\n    };\n  };\n\n  const updateScreenWidth = () => {\n    setScreenWidth(ref.current && ref.current.clientWidth);\n  };\n\n  const onResize = debounce(updateScreenWidth, 20);\n\n  window.addEventListener('resize', onResize);\n\n  const mobileScreen = !sideBarIsOpen\n    ? <Question setSideBarIsOpen={setSideBarIsOpen} />\n    : <SideBar setSideBarIsOpen={setSideBarIsOpen} />;\n\n  return (\n    <main className=\"play\" ref={ref}>\n      {screenWidth && screenWidth >= 800 &&\n        <div className=\"play__wrapper\">\n          <Question screenWidth={screenWidth} />\n          <SideBar screenWidth={screenWidth} />\n        </div>}\n      {screenWidth && screenWidth < 800 &&\n        mobileScreen}\n    </main>\n  );\n};\n\nconst mapStateToProps = (state: ReduxState) => ({\n  questions: state.questions,\n  choosenQuestionIndex: state.choosenQuestionIndex,\n  result: state.result,\n});\n\nconst mapDispatchToProps = (dispatch: Function) => ({\n  modifyQuestions: (value: StartData) => dispatch(changeQuestions(value)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Play);\n","import React, { useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { ReduxState } from '../types';\n\ninterface Props {\n  result: [number, string, null],\n}\n\nconst Final = ({ result }: Props): JSX.Element => {\n  const history = useHistory();\n\n  useEffect(() => {\n    !result && history.push('/');\n  }, [result]);\n\n  return (\n    <main className=\"home__background\">\n      <div className=\"home__wrapper\">\n        <div className=\"home__logo\" />\n        <div className=\"home__info\">\n          <p className=\"home__info-headind\">total score</p>\n          <p className=\"home__info-text\">{`$${result && result.toLocaleString()} earned`}</p>\n          <Link to=\"/\" className=\"button\">Try again</Link>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nconst mapStateToProps = (state: ReduxState) => ({\n  result: state.result,\n});\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(Final);\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './components/home';\nimport Play from './components/play';\nimport Final from './components/final';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/game\" exact component={Play} />\n      <Route path=\"/final\" exact component={Final} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\n\nconst middleWares = [thunk];\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(...middleWares),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}